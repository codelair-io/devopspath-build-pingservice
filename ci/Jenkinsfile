def applicationName = "pingservice"
def devEnvironmentName = "pingservice-development"
def stageEnvironmentName = "pingservice-staging"

pipeline {
    agent {
        label 'maven'
    }

    environment {
        VERSION = readMavenPom().getVersion()
    }

    stages {

        stage('SCM Checkout') {
            steps {
                git branch: 'develop', 'https://github.com/codelair-io/devopspath-build-pingservice.git'
            }
        }

        stage('Build') {
            steps {
                sh './mvnw clean install -DskipTests'
            }
        }

        stage('Unit Tests') {
            steps {
                sh './mvnw test'
            }
        }

        stage('Configure DEV Environment') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.apply("-f k8s/dev/buildconfig.yaml --namespace ${devEnvironmentName}")
                            openshift.apply("-f k8s/dev/deployconfig.yaml --namespace ${devEnvironmentName}")
                        }
                    }
                }
            }
        }

        stage('Deploy to DEV') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            def buildConfig = openshift.selector("bc", applicationName);
                            def build = buildConfig.startBuild("--from-dir . --namespace ${devEnvironmentName}");
                            build.logs("-f --namespace ${devEnvironmentName}");
                            openshift.tag("${devEnvironmentName}/${applicationName}:latest", "${devEnvironmentName}/${applicationName}:${VERSION}")
                        }
                    }
                }
            }
        }

        stage('Promote to STAGE?') {
            steps {
                timeout(time: 30, unit: 'DAYS'){
                    input message: "Promote to Staging?"
                }
            }
        }

        stage('Integration Tests') {
            steps {
                sh './mvnw verify'
            }
        }

        stage('Configure STAGE Environment') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.apply("-f k8s/stage/buildconfig.yaml --namespace ${devEnvironmentName}")
                            openshift.apply("-f k8s/stage/deployconfig.yaml --namespace ${devEnvironmentName}")
                        }
                    }
                }
            }
        }

        stage('Promote to STAGE') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.tag("${devEnvironmentName}/${applicationName}:${VERSION}", "${stageEnvironmentName}/${applicationName}:latest")
                            openshift.tag("${devEnvironmentName}/${applicationName}:${VERSION}", "${stageEnvironmentName}/${applicationName}:${VERSION}")
                        }
                    }
                }
            }
        }
    }
}
